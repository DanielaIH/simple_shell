./"This is the manpage of the DS_SHELL project at Holberton School

.TH DS_SHELL "April 20th 2022" "DS_SHELL man page"

.SH SYNOPSIS

.B #include \fB"main.h"
.B int main(void);

.SH NAME

.B DS_SHELL
- Command line interpreter (Shell).

.SH DESCRIPTION

.B \fBDS_SHELL\fR

The \fBDS_SHELL\fR utility is a command line interpreter that shall
execute commands read from a command line string, the standard input. 

The shell is a command that reads lines from either a file or the terminal, 
interprets them, and generally executes other commands. The shell is a 
command that reads lines from either a file or the terminal, interprets them, 
and generally executes other commands.

The interactive mode,the prompt, ($), which is called the command prompt, 
is issued by the shell. While the prompt is displayed, the user can type a command.

Shell reads the input after the user press Enter. It determines the command 
the user want executed by looking at the first word of the input. The first word 
can refers to a command built in, a command with or without the path, or an 
executable file, while the rest of words means the command's arguments. 
Shell takes the input and separates the words (taking account 
the spaces and tabs like delimeters) into tokens. 



After executes the program, Shell shows again the prompt and wait for another input.




The \fB_printf()\fR function produces output according to a format as
described below. The \fB_printf()\fR function write output to stdout,
the standard output stream and return the number of characters printed.

The function write the output under the control of a format string that
specifies how subsequent arguments are converted for output.

\fBFORMAT of the format string\fR

The format string is a character string, beginning and ending in
its initial shift state, if any.  The format string is composed
of zero or more directives: ordinary characters (not %), which
are copied unchanged to the output stream; and conversion
specifications, each of which results in fetching zero or more
subsequent arguments.  Each conversion specification is
introduced by the character %, and ends with a conversion
specifier.

The overall syntax of a conversion specification is:

\fB%conversion\fR

The arguments must correspond properly (after type promotion) with
the conversion specifier. By default, the arguments are used in the
order given and each conversion specifier asks for the next
argument (and it is an error if insufficiently many arguments are
given).

\fBConversion especifies\fR

A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:

d, i		The int argument is converted to signed decimal notation.

X		The unsigned int argument is converted to unsigned decimal (u), or
		unsigned hexadecimal (the letters ABCDEF are used for X conversions.
c		The int argument is converted to an unsigned char, and the resulting
		character is written.

s		The const char * argument is expected to be a pointer to an array of
		character type (pointer to a string).  Characters from the array are
		written up to (but not including) a terminating null byte ('\0').

%		A '%' is written. No argument is converted. The complete conversion
		specification is '%%'.

\fBRETURN VALUE\fR
Upon successful return, these function return the number of characters printed (excluding the null byte used to end output to strings).

\fBAUTHORS\fR
Written by Daniela Ibarra and Sebastian Carvajal.
